#==============================================================================
# ■ [追加]:Sprite_OneLine_BattleLog
#------------------------------------------------------------------------------
# 　バトルログを動的に表示するスプライトです。単体では1行しか表示できませんが、
# 複数同時に扱うことで複数行の表示を実装しています。
#==============================================================================

class Sprite_OneLine_BattleLog < Sprite
  @@grad_cache = nil
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor   :position # 表示位置(行)
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize(width, height, max_line_number)
    super(nil)
    @rx = @ry = 0
    @line_height = height
    @max_line_number = max_line_number
    @position = -1
    @visible = true
    self.ox = -LNX11::STORAGE_OFFSET[:x]
    self.oy = -LNX11::STORAGE_OFFSET[:y]
    self.opacity = 0
    self.z = 96
    self.bitmap = Bitmap.new(width * 0.75, height)
  end
  #--------------------------------------------------------------------------
  # ● 解放
  #--------------------------------------------------------------------------
  def dispose
    self.bitmap.dispose
    super
  end
  #--------------------------------------------------------------------------
  # ● スプライトの表示
  #--------------------------------------------------------------------------
  def show
    @visible = true
  end
  #--------------------------------------------------------------------------
  # ● スプライトの非表示
  #--------------------------------------------------------------------------
  def hide
    @visible = false
    @position = -1
  end
  #--------------------------------------------------------------------------
  # ● 表示しているか？
  #--------------------------------------------------------------------------
  def visible?
    @visible
  end
  #--------------------------------------------------------------------------
  # ● フレーム更新
  #--------------------------------------------------------------------------
  def update
    return if self.opacity == 0
    self.opacity += @visible && @position >= 0 ? 24 : -24
    self.visible = self.opacity > 0
    return unless @visible # 不可視状態なら座標を更新しない
    @ry = (target_y + (@ry * 5)) / 6.0 if target_y < @ry
    @rx += 2 if @rx < 0
    self.x = @rx
    self.y = @ry
  end
  #--------------------------------------------------------------------------
  # ● テキストの描画
  # 　自身が持つ Bitmap で描画するのではなく、Window の contents から
  # コピーします(Sprite からでは Window_Base#draw_text_ex が扱えないため)。
  #--------------------------------------------------------------------------
  def set_text(window, position)
    self.bitmap.clear
    # 横グラデーション
    if @@grad_cache && !@@grad_cache.disposed?
      self.bitmap.blt(0, 0, @@grad_cache, self.bitmap.rect)
    else
      color = LNX11::STORAGE_GRADIENT_COLOR
      fillrect = self.bitmap.rect
      fillrect.width /= 2
      self.bitmap.gradient_fill_rect(fillrect, color[0], color[1])
      @@grad_cache = self.bitmap.clone
    end
    # contents からコピー
    self.bitmap.blt(4, 0, window.contents, self.bitmap.rect)
    self.opacity = 1
    @rx = -8
    @position = position
    @ry = target_y
  end
  #--------------------------------------------------------------------------
  # ● 位置の繰り上げ
  #--------------------------------------------------------------------------
  def up_position
    @position -= 1
  end
  #--------------------------------------------------------------------------
  # ● メッセージが空か？(表示待ち)
  #--------------------------------------------------------------------------
  def mes_empty?
    @position < 0
  end
  #--------------------------------------------------------------------------
  # ● 移動するべき Y 座標
  #--------------------------------------------------------------------------
  def target_y
    @position * @line_height
  end
end
